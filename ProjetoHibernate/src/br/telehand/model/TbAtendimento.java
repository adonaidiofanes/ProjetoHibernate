package br.telehand.model;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import br.telehand.state.Aberto;
import br.telehand.state.Cancelado;
import br.telehand.state.Efetuado;
import br.telehand.state.Pendente;
import br.telehand.state.Reagendado;
import br.telehand.state.StateAtendimento;

/**
 * TbAtendimento generated by hbm2java
 */
@Entity
@Table(name = "tb_atendimento", catalog = "db_sge")
public class TbAtendimento implements java.io.Serializable {

	/**
	 * Serial UID da classe
	 */
	private static final long serialVersionUID = 1L;
	private Integer idAtendimento;
	private TbOs tbOs;
	private TbCategoria tbCategoria;
	private TbAgenda tbAgenda;
	private Date dtAgendamento;
	private int nrMatricula;
	
	private char cdStatus = 'A';
	
	@Transient
	private StateAtendimento state = Aberto.instancia();

	public TbAtendimento() {
	}

	public TbAtendimento(TbOs tbOs, TbAgenda tbAgenda, Date dtAgendamento, int nrMatricula, char cdStatus) {
		this.tbOs = tbOs;
		this.tbAgenda = tbAgenda;
		this.dtAgendamento = dtAgendamento;
		this.nrMatricula = nrMatricula;
		this.cdStatus = cdStatus;
	}

	public TbAtendimento(TbOs tbOs, TbCategoria tbCategoria, TbAgenda tbAgenda, Date dtAgendamento, int nrMatricula, char cdStatus) {
		this.tbOs = tbOs;
		this.tbCategoria = tbCategoria;
		this.tbAgenda = tbAgenda;
		this.dtAgendamento = dtAgendamento;
		this.nrMatricula = nrMatricula;
		this.cdStatus = cdStatus;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Id_atendimento", unique = true, nullable = false)
	public Integer getIdAtendimento() {
		return this.idAtendimento;
	}

	public void setIdAtendimento(Integer idAtendimento) {
		this.idAtendimento = idAtendimento;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "Id_OS", nullable = false)
	public TbOs getTbOs() {
		return this.tbOs;
	}

	public void setTbOs(TbOs tbOs) {
		this.tbOs = tbOs;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "Id_categoria")
	public TbCategoria getTbCategoria() {
		return this.tbCategoria;
	}

	public void setTbCategoria(TbCategoria tbCategoria) {
		this.tbCategoria = tbCategoria;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumns({
			@JoinColumn(name = "Id_janela", referencedColumnName = "Id_janela", nullable = false),
			@JoinColumn(name = "Id_equipe", referencedColumnName = "Id_equipe", nullable = false) })
	public TbAgenda getTbAgenda() {
		return this.tbAgenda;
	}

	public void setTbAgenda(TbAgenda tbAgenda) {
		this.tbAgenda = tbAgenda;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "Dt_agendamento", nullable = false, length = 0)
	public Date getDtAgendamento() {
		return this.dtAgendamento;
	}

	public void setDtAgendamento(Date dtAgendamento) {
		this.dtAgendamento = dtAgendamento;
	}

	@Column(name = "Nr_matricula", nullable = false)
	public int getNrMatricula() {
		return this.nrMatricula;
	}

	public void setNrMatricula(int nrMatricula) {
		this.nrMatricula = nrMatricula;
	}

	@Column(name = "Cd_status", nullable = false, length = 1)
	public char getCdStatus() {
		return this.cdStatus;
	}

	private void setCdStatus(char cdStatus) {
		this.cdStatus = cdStatus;
		montaEstado(cdStatus);
	}
	
	public StateAtendimento retornarEstado() {
		return state;
	}

	public void estabelecerEstado(StateAtendimento state) {
		this.state = state;
		this.cdStatus = state.getStateEnum().getStateChar();
	}

	public void abrirAtendimento() {
		state.abrirAtendimento(this);
	}
	
	public void reagendarAtendimento() {
		state.reagendarAtendimento(this);
	}
	
	public void concluirAtendimento() {
		state.concluirAtendimento(this);
	}
	
	public void gerarPendencia() {
		state.gerarPendencia(this);
	}
	
	public void cancelarAtendimento() {
		state.cancelarAtendimento(this);
	}
	
	private void montaEstado(char cdStatus) {
		switch (cdStatus) {
		case 'A':
			this.estabelecerEstado(Aberto.instancia());
			break;
		case 'C':
			this.estabelecerEstado(Cancelado.instancia());
			break;
		case 'P':
			this.estabelecerEstado(Pendente.instancia());
			break;
		case 'R':
			this.estabelecerEstado(Reagendado.instancia());
			break;
		case 'E':
			this.estabelecerEstado(Efetuado.instancia());
			break;
		}
	}
}
